<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="..\..\props\project-directory.props" />
	<!--<PropertyGroup>
		<FluentMigratorTasksPath Condition="'$(FluentMigratorTasksPath)' == ''">$(MSBuildExtensionsPath)\FluentMigrator</FluentMigratorTasksPath>
		<FluentMigratorTasksLib>$(FluentMigratorTasksPath)\FluentMigrator.MSBuild.dll</FluentMigratorTasksLib>
	</PropertyGroup>
	<UsingTask TaskName="FluentMigrator.MSBuild.Migrate" AssemblyFile="$(FluentMigratorTasksLib)" />-->
	<PropertyGroup>
		<MigrateDBConnection></MigrateDBConnection>
		<MigrateSteps></MigrateSteps>
		<MigrateVersion></MigrateVersion>
		<MigrateTask></MigrateTask>
		<MigrateDBType Condition=" '$(MigrateDBType)' == '' ">sqlserver</MigrateDBType>
		<MigrateAssembly Condition=" '$(MigrateAssembly)' == '' ">$(TargetPath)</MigrateAssembly>
		<MigrateWorkingDirectory Condition=" '$(MigrateWorkingDirectory)' == '' ">$(OutputPath)</MigrateWorkingDirectory>
	</PropertyGroup>	

	<!--
	=======================================================================================================
		
		GetConnectionStringFromConfigFile
		
		Obtains the database connection string from the app.config of the class library

	=======================================================================================================
	-->
	<PropertyGroup>
		<MigrateDbConnectionKey Condition="'$(MigrateDbConnectionKey)' == ''">Migrate</MigrateDbConnectionKey>
	</PropertyGroup>
	<Target Name="GetConnectionStringFromConfigFile" Condition="'$(MigrateDBConnection)' == ''">
		<PropertyGroup>
			<ConnectionStringXPathQuery>configuration/connectionStrings/add[@name='$(MigrateDbConnectionKey)']/@connectionString</ConnectionStringXPathQuery>
			<ConfigFilePath>$(MigrateAssembly).dll.config</ConfigFilePath>
			<ConfigFilePath Condition="!Exists('$(ConfigFilePath)')">$(MigrateAssembly).config</ConfigFilePath>
		</PropertyGroup>
		<Message Importance="high" Text="Obtaining the database connectionstring can be found in $(ConfigFilePath)" />
		<XmlRead XPath="$(ConnectionStringXPathQuery)" XmlFileName="$(ConfigFilePath)" >
			<Output TaskParameter="Value" PropertyName="MigrateDBConnection" />
		</XmlRead>
		<Message Text="Connection string is $(MigrateDBConnection)" />
	</Target>	

	<!--
		=======================================================================================================
		
		Run the migration assembly on the database 
		
		=======================================================================================================
	-->
	<PropertyGroup>
		<MigrateDependsOn>$(MigrateDependsOn);GetConnectionStringFromConfigFile</MigrateDependsOn>
	</PropertyGroup>
	<Target Name="Migrate" DependsOnTargets="$(MigrateDependsOn)">
		<PropertyGroup>
			<MigrateCommand>$(FluentMigratorTasksPath)\Migrate.exe --verbose -a $(MigrateAssembly)  -db $(MigrateDBType) -conn "$(MigrateDBConnection)"</MigrateCommand>
			<MigrateCommand Condition=" '$(MigrateTask)' != ''">$(MigrateCommand) --task $(MigrateTask) </MigrateCommand>
			<MigrateCommand Condition=" '$(MigrateToVersion)' != ''">$(MigrateCommand) --version=$(MigrateToVersion) </MigrateCommand>
			<MigrateCommand Condition=" '$(MigrationSteps)' != ''">$(MigrateCommand) --steps=$(MigrationSteps) </MigrateCommand>
		</PropertyGroup>
		<Error Condition="$(MigrateDBType) == ''" Text="No DB Type entered"/>
		<Warning Condition="'$(MigrateDBConnection)' == ''" Text="The MigrationDBConnection string has not been set"/>
		<Message Text="Migration task is $(MigrateTask)"/>
		<Message Text="Running command $(MigrateCommand)"/>
		<Exec WorkingDirectory="$(MigrateWorkingDirectory)" Condition="'$(MigrateDBConnection)' != ''" Command="$(MigrateCommand)" />
	</Target>

	<!--
		=======================================================================================================
		
		Rollback
		
		Task for rolling back the changes made in the build
		
		TODO: I would like to be able to perform these tasks in Visual Studio via an action in the context menu
		
		=======================================================================================================
	-->	
	<PropertyGroup>
		<RollbackAll Condition="$(RollbackAll) == ''">false</RollbackAll>
	</PropertyGroup>
	<Target Name="Rollback" DependsOnTargets="$(MigrateDependsOn)">
		<PropertyGroup>
			<MigrateTask>rollback</MigrateTask>
			<MigrateTask Condition=" $(RollbackAll) == 'true'">rollback:all</MigrateTask>
			<MigrateTask Condition=" '$(MigrateToVersion)' != ''">rollback:toversion</MigrateTask>
			<MigrationSteps Condition="$(MigrationSteps) == ''">1</MigrationSteps>
			<MigrateCommand>"$(FluentMigratorTasksPath)\Migrate.exe" --verbose -a $(MigrateAssembly)  -db $(MigrateDBType) -conn "$(MigrateDBConnection)"</MigrateCommand>
			<MigrateCommand Condition=" '$(MigrateTask)' != ''">$(MigrateCommand) --task $(MigrateTask) </MigrateCommand>
			<MigrateCommand Condition=" '$(MigrateToVersion)' != ''">$(MigrateCommand) --version=$(MigrateToVersion) </MigrateCommand>
			<MigrateCommand Condition=" '$(MigrationSteps)' != ''">$(MigrateCommand) --steps=$(MigrationSteps) </MigrateCommand>
		</PropertyGroup>
		<Error Condition="$(MigrateDBType) == ''" Text="No DB Type entered"/>
		<Error Condition="$(MigrateDBConnection) == ''" Text="No Connection string entered" />
		<Message Condition="$(RollbackAll) == 'true'" Text="Rolling back all migrations." Importance="high"></Message>
		<Message Condition="$(MigrationSteps) != ''" Text="Rolling back $(MigrationSteps) step(s)" Importance="high"></Message>
		<Message Condition="$(MigrateToVersion) != ''" Text="Rolling back to version $(MigrateToVersion)" Importance="high"></Message>
		<Message Text="Running command $(MigrateCommand)"/>
		<Exec WorkingDirectory="$(MigrateWorkingDirectory)" Command="$(MigrateCommand)" />
	</Target>

	<!--
		=======================================================================================================
		=======================================================================================================
-->


	<!--<Target Name="Rollback"  DependsOnTargets="CheckRequiredProperties">
		<Message Text="Rollbacking Migrations From $(MigrateAssembly)"/>
		
		<FluentMigrator.MSBuild.Migrate Database="$(MigrateDBType)"
				 Task="rollback"
				 Connection="$(MigrateDBConnection)"
				 Target="$(MigrateAssembly)"
				 Steps="$(RollbackSteps)"/>
	</Target>


	<PropertyGroup>
		<RollbackToVersion></RollbackToVersion>
	</PropertyGroup>
	<Target Name="RollbackTo" DependsOnTargets="CheckRequiredProperties">
		<Error Condition="$(RollbackToVersion) == ''" Text="No Version entered"/>
		<Message Text="Rollbacking to version $(RollbackToVersion)."/>
		<FluentMigrator.MSBuild.Migrate Database="$(MigrateDBType)"
				Task="rollback:toversion"
				Connection="$(MigrateDBConnection)"
				Target="$(MigrateAssembly)"
				Version="$(RollbackToVersion)"/>
	</Target>-->
</Project>
